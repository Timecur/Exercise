#include <iostream>
#include <map>
#include <vector>
#include <algorithm>

using namespace std;

/*
	题目ID：微信红包
	链接：https://www.nowcoder.com/practice/fbcf95ed620f42a88be24eb2cd57ec54?tpId=49&&tqId=29311&rp=1&ru=/activity/oj&qru=/ta/2016test/question-ranking
*/

//1. 按序排列后，如果一个数超过总数的一半，总数的1/2 一定为该元素 
class Gift {
public:
	int getValue(vector<int> gifts, int n) {
		// write code here
		if (gifts.size() != n || n < 2)
			return 0;

		sort(gifts.begin(), gifts.end());

		int index = n / 2;
		int count = 0;
		for (int i = 0; i < n; i++){
			if (gifts[index] == gifts[i])
				count++;
		}
		if (count > n / 2)
			return gifts[index];
		else
			return 0;

	}
};

//2. 由map映射关系求解
class Gift {
public:
	int getValue(vector<int> gifts, int n) {
		map<int, int> mm;
		for (int &e : gifts){
			if (mm.count(e) < 0){
				mm[e] = 1;
			}
			else
				mm[e]++;
		}
		map<int, int>::iterator it = mm.begin();
		for (; it != mm.end(); it++){
			if (it->second > gifts.size() / 2){
				return it->first;
			}
		}
		return 0;

	}
};

//3. map优化
class Gift {
public:
	int getValue(vector<int> gifts, int n) {
		map<int, int> mm;
		//map<int, int>::iterator it = mm.begin();
		for (int i = 0 ; i < n; i++)
			if (++mm[gifts[i]] > n / 2)
				return mm[i];
		return 0;

	}
};


//4. 摩根投票法
class Gift {
public:
	int getValue(vector<int> gifts, int n) {
		// write code here
		if (gifts.size() < n) return 0;
		if (gifts.size() == 0) return 0;
		int count = 0, temp;
		for (int i = 0; i<n; i++)
		{
			if (count == 0)
			{
				temp = gifts[i];
				count = 1;
			}
			else{
				if (temp == gifts[i])
					count++;
				else
					count--;
			}
		}
		
		count = 0;
		for (int i = 0; i<n; i++){
			if (temp == gifts[i])
				count++;
		}
		return count > n/2 ? temp : 0;
	}
};


int main()
{
	Gift s;
	vector<int> v = { 1 , 2,2,2,3};

	s.getValue(v, 5);

	return 0;
}

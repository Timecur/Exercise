/*
class Solution {
public:
    int LastRemaining_Solution(int n, int m)
{
	if (n == 0)
		return -1;
	vector<int> v(n);
	for (int i = 0; i < n; i++){
		v[i] = i;
	}
	vector<int>::iterator it = v.begin();
	int step = 0;
	while (v.size() > 1){
			step+= (m-1);
			step %= v.size();
			v.erase(it + step);
	}

	return v[0];
}

};*/

class Solution {
public:
    int LastRemaining_Solution(int n, int m)
    {
        if(n == 0)
            return -1;
        if(n == 1){
            return 0;
        }
        // f[i] = (f[i-1]+m)%cur_n;
        // 递推前一次被选中的位置
        return (LastRemaining_Solution(n-1, m)+m)%n; 
    }
};

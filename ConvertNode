 https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&tqId=11179&tPage=2&rp=2&ru=/ta/coding-interviews&qru=/ta/coding-interviews/question-ranking

/*
struct TreeNode {
	int val;
	struct TreeNode *left;
	struct TreeNode *right;
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:

    void ConvertNode(TreeNode* pRoot, TreeNode** pLastOfLeft)
    {
        if(!pRoot){
            return;
        }
        
        TreeNode* pCur = pRoot;
        
        // 左子树不为空，遍历左子树
        if(pCur->left){
            ConvertNode(pCur->left, pLastOfLeft);
        }
        
        // 节点的链接：当前节点的left连接上个节点，
        // 上个节点不为空时其right连接当前节点
        pCur->left = *pLastOfLeft;
        if(*pLastOfLeft != nullptr){
            (*pLastOfLeft)->right = pCur;
        }
        
        // 更新最后节点
        *pLastOfLeft = pCur;
        // 遍历右子树
        if(pCur->right){
            ConvertNode(pCur->right, pLastOfLeft);
        }
    }
    
    TreeNode* Convert(TreeNode* pRootOfTree)
    {
        TreeNode* pLastOfLeft = nullptr;
        ConvertNode(pRootOfTree, &pLastOfLeft);
        
        TreeNode* pHeadNode = pLastOfLeft;
        while(pHeadNode && pHeadNode->left){
            pHeadNode = pHeadNode->left;
        }
        return pHeadNode;
    }
    
};

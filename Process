#include <iostream>
#include <queue>
#include <vector>
#include <sstream>
#include <string>
#include <algorithm>

using namespace std;

class Process{
public:
	Process(){
		_pid = "P";
		_next = "0";
		_status = 'R';
	}

	Process(string pid, int time, int level)
		:_pid(pid)
		, _time(time)
		, _level(level)
	{
		_next = "0";
		if (time > 0)
			_status = 'R';
		else
			_status = 'E';
	}

	friend bool CMP(Process& pcb1, Process& pcb2){
		return pcb1._level > pcb2._level;
	}
	
	// 运行
	friend void Run(queue<Process>& q){
		if (q.empty()){
			cout << "队列为空" << endl;
			return;
		}
		Process pcb = q.front();
		q.pop();
		pcb._time -= 1;
		if (pcb._time == 0){
			pcb._level = 0;
			pcb._status = 'E';
		}
		else{
			pcb._level -= 1;
			q.push(pcb);
		}
		GetStatus(q);
	}

	// 获取进程队列中元素状态
	friend void GetStatus(queue<Process>& q){
		int count = 0;
		if (q.empty()){
			cout << "队列为空" << endl;
			return;
		}

		
		vector<Process> vret;
		while (!q.empty()){
			if (q.front()._time > 0){
				vret.push_back(q.front());
				q.pop();
			}
			else{
				q.front()._status = 'E';
				q.pop();
			}
		}
		sort(vret.begin(), vret.end(), CMP);

		
		for (int i = 1; i < vret.size(); i++){
			vret[i - 1]._next = vret[i]._pid;
			q.push(vret[i-1]);
		}
		q.push(vret[vret.size()-1]);
		
		count = vret.size();

		while (count--){
			Process pcb = q.front();
			q.pop();
			/*stringstream stream;
			stream << pcb._pid;
*/
			cout << "进程名:" << pcb._pid;
			if (pcb._next != "0"){
				cout << "    下一个进程:" << pcb._next;
			}
			else{
				cout << "    下一个进程:" << 0;
			}
			cout << "   运行时间： " << pcb._time << "   优先数:" << pcb._level\
				<< "   状态:" << pcb._status << endl;
			q.push(pcb);
		}
	}


	~Process()
	{}

private:
	string _pid;
	string _next;
	int _time;
	int _level;
	char _status;
};

int main()
{
	queue<Process> q;
	Process K1("P1", 2, 1);
	q.push(K1);
	Process K2("P2", 3, 5);
	q.push(K2);
	Process K3("P3", 1, 3);
	q.push(K3);
	Process K4("P4", 2, 4);
	q.push(K4);
	Process K5("P5", 4, 2);
	q.push(K5);

	// 运行前状态
	GetStatus(q);
	cout << endl;

	// 队列不为空获取当前队列状态
	while (!q.empty()){
		// 运行一次后的状态
		Run(q);
		cout << endl;
	}

	return 0;
}
